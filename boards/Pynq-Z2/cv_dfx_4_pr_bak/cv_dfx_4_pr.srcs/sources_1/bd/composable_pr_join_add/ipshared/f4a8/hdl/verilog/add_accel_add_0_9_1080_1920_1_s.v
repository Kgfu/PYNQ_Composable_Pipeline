// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module add_accel_add_0_9_1080_1920_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_in0_434_dout,
        img_in0_434_empty_n,
        img_in0_434_read,
        img_in1_435_dout,
        img_in1_435_empty_n,
        img_in1_435_read,
        img_out_436_din,
        img_out_436_full_n,
        img_out_436_write,
        p_src1_rows_dout,
        p_src1_rows_empty_n,
        p_src1_rows_read,
        p_src1_cols_dout,
        p_src1_cols_empty_n,
        p_src1_cols_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] img_in0_434_dout;
input   img_in0_434_empty_n;
output   img_in0_434_read;
input  [23:0] img_in1_435_dout;
input   img_in1_435_empty_n;
output   img_in1_435_read;
output  [23:0] img_out_436_din;
input   img_out_436_full_n;
output   img_out_436_write;
input  [31:0] p_src1_rows_dout;
input   p_src1_rows_empty_n;
output   p_src1_rows_read;
input  [31:0] p_src1_cols_dout;
input   p_src1_cols_empty_n;
output   p_src1_cols_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_in0_434_read;
reg img_in1_435_read;
reg img_out_436_write;
reg p_src1_rows_read;
reg p_src1_cols_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_in0_434_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln822_reg_344;
reg    img_in1_435_blk_n;
reg    img_out_436_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln822_reg_344_pp0_iter1_reg;
reg    p_src1_rows_blk_n;
reg    p_src1_cols_blk_n;
reg   [15:0] j_V_reg_114;
wire   [15:0] image_width_fu_125_p1;
reg   [15:0] image_width_reg_320;
wire   [15:0] op2_fu_129_p1;
reg   [15:0] op2_reg_325;
wire   [12:0] i_V_1_fu_133_p2;
reg   [12:0] i_V_1_reg_330;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln878_fu_143_p2;
wire   [15:0] add_ln878_fu_148_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln822_fu_154_p2;
reg   [0:0] tmp_reg_348;
wire   [7:0] add_ln208_fu_189_p2;
reg   [7:0] add_ln208_reg_353;
reg   [0:0] tmp_1_reg_358;
wire   [7:0] add_ln208_1_fu_237_p2;
reg   [7:0] add_ln208_1_reg_363;
reg   [0:0] tmp_2_reg_368;
wire   [7:0] add_ln208_2_fu_285_p2;
reg   [7:0] add_ln208_2_reg_373;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [12:0] i_V_reg_103;
reg    ap_block_state1;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln878_fu_139_p1;
wire   [7:0] lhs_V_fu_159_p1;
wire   [7:0] rhs_fu_163_p1;
wire   [8:0] zext_ln1346_1_fu_171_p1;
wire   [8:0] zext_ln1346_fu_167_p1;
wire   [8:0] ret_fu_175_p2;
wire   [7:0] lhs_V_1_fu_195_p4;
wire   [7:0] rhs_1_fu_205_p4;
wire   [8:0] zext_ln1346_3_fu_219_p1;
wire   [8:0] zext_ln1346_2_fu_215_p1;
wire   [8:0] ret_1_fu_223_p2;
wire   [7:0] lhs_V_2_fu_243_p4;
wire   [7:0] rhs_2_fu_253_p4;
wire   [8:0] zext_ln1346_5_fu_267_p1;
wire   [8:0] zext_ln1346_4_fu_263_p1;
wire   [8:0] ret_2_fu_271_p2;
wire   [7:0] select_ln208_2_fu_303_p3;
wire   [7:0] select_ln208_1_fu_297_p3;
wire   [7:0] select_ln208_fu_291_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln878_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln878_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln878_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_V_reg_103 <= i_V_1_reg_330;
    end else if ((~((ap_start == 1'b0) | (p_src1_cols_empty_n == 1'b0) | (p_src1_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_reg_103 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln822_fu_154_p2 == 1'd0))) begin
        j_V_reg_114 <= add_ln878_fu_148_p2;
    end else if (((icmp_ln878_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_V_reg_114 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln822_reg_344 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln208_1_reg_363 <= add_ln208_1_fu_237_p2;
        add_ln208_2_reg_373 <= add_ln208_2_fu_285_p2;
        add_ln208_reg_353 <= add_ln208_fu_189_p2;
        tmp_1_reg_358 <= ret_1_fu_223_p2[32'd8];
        tmp_2_reg_368 <= ret_2_fu_271_p2[32'd8];
        tmp_reg_348 <= ret_fu_175_p2[32'd8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_1_reg_330 <= i_V_1_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln822_reg_344 <= icmp_ln822_fu_154_p2;
        icmp_ln822_reg_344_pp0_iter1_reg <= icmp_ln822_reg_344;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        image_width_reg_320 <= image_width_fu_125_p1;
        op2_reg_325 <= op2_fu_129_p1;
    end
end

always @ (*) begin
    if ((icmp_ln822_fu_154_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln822_reg_344 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_in0_434_blk_n = img_in0_434_empty_n;
    end else begin
        img_in0_434_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln822_reg_344 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_in0_434_read = 1'b1;
    end else begin
        img_in0_434_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln822_reg_344 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_in1_435_blk_n = img_in1_435_empty_n;
    end else begin
        img_in1_435_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln822_reg_344 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_in1_435_read = 1'b1;
    end else begin
        img_in1_435_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln822_reg_344_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        img_out_436_blk_n = img_out_436_full_n;
    end else begin
        img_out_436_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln822_reg_344_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_out_436_write = 1'b1;
    end else begin
        img_out_436_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_cols_blk_n = p_src1_cols_empty_n;
    end else begin
        p_src1_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src1_cols_empty_n == 1'b0) | (p_src1_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_cols_read = 1'b1;
    end else begin
        p_src1_cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_rows_blk_n = p_src1_rows_empty_n;
    end else begin
        p_src1_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src1_cols_empty_n == 1'b0) | (p_src1_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_rows_read = 1'b1;
    end else begin
        p_src1_rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_src1_cols_empty_n == 1'b0) | (p_src1_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln878_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln822_fu_154_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln822_fu_154_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln208_1_fu_237_p2 = (rhs_1_fu_205_p4 + lhs_V_1_fu_195_p4);

assign add_ln208_2_fu_285_p2 = (rhs_2_fu_253_p4 + lhs_V_2_fu_243_p4);

assign add_ln208_fu_189_p2 = (rhs_fu_163_p1 + lhs_V_fu_159_p1);

assign add_ln878_fu_148_p2 = (j_V_reg_114 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln822_reg_344_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (img_out_436_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln822_reg_344 == 1'd0) & (img_in0_434_empty_n == 1'b0)) | ((icmp_ln822_reg_344 == 1'd0) & (img_in1_435_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln822_reg_344_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (img_out_436_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln822_reg_344 == 1'd0) & (img_in0_434_empty_n == 1'b0)) | ((icmp_ln822_reg_344 == 1'd0) & (img_in1_435_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln822_reg_344_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (img_out_436_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln822_reg_344 == 1'd0) & (img_in0_434_empty_n == 1'b0)) | ((icmp_ln822_reg_344 == 1'd0) & (img_in1_435_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_src1_cols_empty_n == 1'b0) | (p_src1_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln822_reg_344 == 1'd0) & (img_in0_434_empty_n == 1'b0)) | ((icmp_ln822_reg_344 == 1'd0) & (img_in1_435_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln822_reg_344_pp0_iter1_reg == 1'd0) & (img_out_436_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_V_1_fu_133_p2 = (i_V_reg_103 + 13'd1);

assign icmp_ln822_fu_154_p2 = ((j_V_reg_114 == image_width_reg_320) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_143_p2 = ((zext_ln878_fu_139_p1 < op2_reg_325) ? 1'b1 : 1'b0);

assign image_width_fu_125_p1 = p_src1_cols_dout[15:0];

assign img_out_436_din = {{{select_ln208_2_fu_303_p3}, {select_ln208_1_fu_297_p3}}, {select_ln208_fu_291_p3}};

assign lhs_V_1_fu_195_p4 = {{img_in0_434_dout[15:8]}};

assign lhs_V_2_fu_243_p4 = {{img_in0_434_dout[23:16]}};

assign lhs_V_fu_159_p1 = img_in0_434_dout[7:0];

assign op2_fu_129_p1 = p_src1_rows_dout[15:0];

assign ret_1_fu_223_p2 = (zext_ln1346_3_fu_219_p1 + zext_ln1346_2_fu_215_p1);

assign ret_2_fu_271_p2 = (zext_ln1346_5_fu_267_p1 + zext_ln1346_4_fu_263_p1);

assign ret_fu_175_p2 = (zext_ln1346_1_fu_171_p1 + zext_ln1346_fu_167_p1);

assign rhs_1_fu_205_p4 = {{img_in1_435_dout[15:8]}};

assign rhs_2_fu_253_p4 = {{img_in1_435_dout[23:16]}};

assign rhs_fu_163_p1 = img_in1_435_dout[7:0];

assign select_ln208_1_fu_297_p3 = ((tmp_1_reg_358[0:0] == 1'b1) ? 8'd255 : add_ln208_1_reg_363);

assign select_ln208_2_fu_303_p3 = ((tmp_2_reg_368[0:0] == 1'b1) ? 8'd255 : add_ln208_2_reg_373);

assign select_ln208_fu_291_p3 = ((tmp_reg_348[0:0] == 1'b1) ? 8'd255 : add_ln208_reg_353);

assign zext_ln1346_1_fu_171_p1 = rhs_fu_163_p1;

assign zext_ln1346_2_fu_215_p1 = lhs_V_1_fu_195_p4;

assign zext_ln1346_3_fu_219_p1 = rhs_1_fu_205_p4;

assign zext_ln1346_4_fu_263_p1 = lhs_V_2_fu_243_p4;

assign zext_ln1346_5_fu_267_p1 = rhs_2_fu_253_p4;

assign zext_ln1346_fu_167_p1 = lhs_V_fu_159_p1;

assign zext_ln878_fu_139_p1 = i_V_reg_103;

endmodule //add_accel_add_0_9_1080_1920_1_s
