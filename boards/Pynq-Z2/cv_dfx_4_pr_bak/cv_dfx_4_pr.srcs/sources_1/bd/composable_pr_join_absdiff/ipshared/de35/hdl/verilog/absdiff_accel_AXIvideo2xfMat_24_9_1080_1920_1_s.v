// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module absdiff_accel_AXIvideo2xfMat_24_9_1080_1920_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_in0_434_din,
        img_in0_434_full_n,
        img_in0_434_write,
        stream_in1_TDATA,
        stream_in1_TVALID,
        stream_in1_TREADY,
        stream_in1_TKEEP,
        stream_in1_TSTRB,
        stream_in1_TUSER,
        stream_in1_TLAST,
        stream_in1_TID,
        stream_in1_TDEST,
        p_read,
        p_read1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_state8 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [23:0] img_in0_434_din;
input   img_in0_434_full_n;
output   img_in0_434_write;
input  [23:0] stream_in1_TDATA;
input   stream_in1_TVALID;
output   stream_in1_TREADY;
input  [2:0] stream_in1_TKEEP;
input  [2:0] stream_in1_TSTRB;
input  [0:0] stream_in1_TUSER;
input  [0:0] stream_in1_TLAST;
input  [0:0] stream_in1_TID;
input  [0:0] stream_in1_TDEST;
input  [31:0] p_read;
input  [31:0] p_read1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_in0_434_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_in0_434_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln132_reg_459;
reg    stream_in1_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] ap_phi_mux_start_phi_fu_143_p4;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln132_fu_392_p2;
wire   [0:0] or_ln138_fu_397_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] ap_phi_mux_last_1_phi_fu_327_p4;
reg   [10:0] j_reg_183;
reg   [0:0] last_reg_194;
reg   [0:0] start_3_reg_206;
reg   [23:0] axi_data_V_3_reg_216;
reg   [0:0] axi_last_V_3_reg_227;
reg   [0:0] axi_last_V_14_reg_237;
reg   [23:0] p_Val2_s_reg_250;
reg    ap_block_state2;
reg    ap_block_state8;
wire   [0:0] cmp743_fu_354_p2;
reg   [0:0] cmp743_reg_436;
wire    ap_CS_fsm_state3;
wire   [10:0] i_3_fu_364_p2;
reg   [10:0] i_3_reg_440;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln128_fu_377_p2;
wire   [10:0] j_3_fu_382_p2;
reg    ap_predicate_op58_read_state5;
reg    ap_block_state5_pp1_stage0_iter0;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg   [0:0] axi_last_V_reg_115;
reg   [23:0] axi_data_V_reg_127;
reg   [0:0] start_reg_139;
reg    ap_block_state1;
reg   [10:0] i_reg_150;
wire    ap_CS_fsm_state9;
reg   [23:0] axi_data_V_2_reg_161;
reg   [23:0] axi_data_V_5_reg_312;
reg   [0:0] axi_last_V_2_reg_172;
reg   [0:0] axi_last_V_5_reg_300;
reg   [0:0] ap_phi_mux_last_phi_fu_198_p4;
reg   [0:0] ap_phi_mux_start_3_phi_fu_209_p4;
reg   [23:0] ap_phi_mux_axi_data_V_3_phi_fu_219_p4;
reg   [0:0] ap_phi_mux_axi_last_V_3_phi_fu_230_p4;
wire   [0:0] ap_phi_reg_pp1_iter0_axi_last_V_14_reg_237;
wire   [23:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_250;
reg   [0:0] ap_phi_mux_axi_last_V_5_ph_phi_fu_266_p4;
reg   [0:0] axi_last_V_5_ph_reg_263;
wire    ap_CS_fsm_state7;
reg   [23:0] ap_phi_mux_axi_data_V_5_ph_phi_fu_278_p4;
reg   [23:0] axi_data_V_5_ph_reg_275;
reg   [0:0] ap_phi_mux_last_1_ph_phi_fu_291_p4;
reg   [0:0] last_1_ph_reg_287;
reg   [0:0] last_1_reg_324;
reg   [0:0] start_2_fu_74;
reg    ap_block_pp1_stage0_01001;
wire   [31:0] zext_ln128_fu_373_p1;
wire   [31:0] zext_ln132_fu_388_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [23:0] stream_in1_TDATA_int_regslice;
wire    stream_in1_TVALID_int_regslice;
reg    stream_in1_TREADY_int_regslice;
wire    regslice_both_AXI_video_strm_V_data_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire   [2:0] stream_in1_TKEEP_int_regslice;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire   [2:0] stream_in1_TSTRB_int_regslice;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire   [0:0] stream_in1_TUSER_int_regslice;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire   [0:0] stream_in1_TLAST_int_regslice;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire   [0:0] stream_in1_TID_int_regslice;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire   [0:0] stream_in1_TDEST_int_regslice;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in;
reg    ap_condition_161;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

absdiff_accel_regslice_both #(
    .DataWidth( 24 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in1_TDATA),
    .vld_in(stream_in1_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_data_V_U_ack_in),
    .data_out(stream_in1_TDATA_int_regslice),
    .vld_out(stream_in1_TVALID_int_regslice),
    .ack_out(stream_in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

absdiff_accel_regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in1_TKEEP),
    .vld_in(stream_in1_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in),
    .data_out(stream_in1_TKEEP_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(stream_in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

absdiff_accel_regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in1_TSTRB),
    .vld_in(stream_in1_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in),
    .data_out(stream_in1_TSTRB_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(stream_in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

absdiff_accel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in1_TUSER),
    .vld_in(stream_in1_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in),
    .data_out(stream_in1_TUSER_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(stream_in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

absdiff_accel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in1_TLAST),
    .vld_in(stream_in1_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in),
    .data_out(stream_in1_TLAST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(stream_in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

absdiff_accel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in1_TID),
    .vld_in(stream_in1_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in),
    .data_out(stream_in1_TID_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(stream_in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

absdiff_accel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in1_TDEST),
    .vld_in(stream_in1_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in),
    .data_out(stream_in1_TDEST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(stream_in1_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd1) & (cmp743_reg_436 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd1) & (cmp743_reg_436 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_data_V_2_reg_161 <= axi_data_V_5_reg_312;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V_2_reg_161 <= axi_data_V_reg_127;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd1) & (cmp743_reg_436 == 1'd1))) begin
        axi_data_V_3_reg_216 <= axi_data_V_2_reg_161;
    end else if (((icmp_ln132_reg_459 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_3_reg_216 <= p_Val2_s_reg_250;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp743_reg_436 == 1'd1))) begin
        axi_data_V_5_ph_reg_275 <= axi_data_V_3_reg_216;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd1) & (cmp743_reg_436 == 1'd0))) begin
        axi_data_V_5_ph_reg_275 <= axi_data_V_2_reg_161;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_data_V_5_reg_312 <= ap_phi_mux_axi_data_V_5_ph_phi_fu_278_p4;
    end else if ((~((last_1_reg_324 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0)) & (last_1_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_data_V_5_reg_312 <= stream_in1_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_161)) begin
        if (((or_ln138_fu_397_p2 == 1'd1) & (icmp_ln132_fu_392_p2 == 1'd0))) begin
            axi_last_V_14_reg_237 <= ap_phi_mux_axi_last_V_3_phi_fu_230_p4;
        end else if (((or_ln138_fu_397_p2 == 1'd0) & (icmp_ln132_fu_392_p2 == 1'd0))) begin
            axi_last_V_14_reg_237 <= stream_in1_TLAST_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            axi_last_V_14_reg_237 <= ap_phi_reg_pp1_iter0_axi_last_V_14_reg_237;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_last_V_2_reg_172 <= axi_last_V_5_reg_300;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V_2_reg_172 <= axi_last_V_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd1) & (cmp743_reg_436 == 1'd1))) begin
        axi_last_V_3_reg_227 <= axi_last_V_2_reg_172;
    end else if (((icmp_ln132_reg_459 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_last_V_3_reg_227 <= axi_last_V_14_reg_237;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp743_reg_436 == 1'd1))) begin
        axi_last_V_5_ph_reg_263 <= last_reg_194;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd1) & (cmp743_reg_436 == 1'd0))) begin
        axi_last_V_5_ph_reg_263 <= axi_last_V_2_reg_172;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_last_V_5_reg_300 <= ap_phi_mux_axi_last_V_5_ph_phi_fu_266_p4;
    end else if ((~((last_1_reg_324 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0)) & (last_1_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_last_V_5_reg_300 <= stream_in1_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_150 <= i_3_reg_440;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_150 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd1) & (cmp743_reg_436 == 1'd1))) begin
        j_reg_183 <= 11'd0;
    end else if (((icmp_ln132_fu_392_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_183 <= j_3_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp743_reg_436 == 1'd1))) begin
        last_1_ph_reg_287 <= last_reg_194;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd1) & (cmp743_reg_436 == 1'd0))) begin
        last_1_ph_reg_287 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        last_1_reg_324 <= ap_phi_mux_last_1_ph_phi_fu_291_p4;
    end else if ((~((last_1_reg_324 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0)) & (last_1_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        last_1_reg_324 <= stream_in1_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd1) & (cmp743_reg_436 == 1'd1))) begin
        last_reg_194 <= 1'd0;
    end else if (((icmp_ln132_reg_459 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        last_reg_194 <= axi_last_V_14_reg_237;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_161)) begin
        if (((or_ln138_fu_397_p2 == 1'd1) & (icmp_ln132_fu_392_p2 == 1'd0))) begin
            p_Val2_s_reg_250 <= ap_phi_mux_axi_data_V_3_phi_fu_219_p4;
        end else if (((or_ln138_fu_397_p2 == 1'd0) & (icmp_ln132_fu_392_p2 == 1'd0))) begin
            p_Val2_s_reg_250 <= stream_in1_TDATA_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            p_Val2_s_reg_250 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_250;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        start_2_fu_74 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state7) & (cmp743_reg_436 == 1'd1))) begin
        start_2_fu_74 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd1) & (cmp743_reg_436 == 1'd1))) begin
        start_3_reg_206 <= start_2_fu_74;
    end else if (((icmp_ln132_reg_459 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        start_3_reg_206 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        start_reg_139 <= 1'd0;
    end else if ((~((start_reg_139 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0)) & (start_reg_139 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        start_reg_139 <= stream_in1_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((~((start_reg_139 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0)) & (start_reg_139 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        axi_data_V_reg_127 <= stream_in1_TDATA_int_regslice;
        axi_last_V_reg_115 <= stream_in1_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cmp743_reg_436 <= cmp743_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_3_reg_440 <= i_3_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln132_reg_459 <= icmp_ln132_fu_392_p2;
    end
end

always @ (*) begin
    if ((icmp_ln132_fu_392_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_459 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_data_V_3_phi_fu_219_p4 = p_Val2_s_reg_250;
    end else begin
        ap_phi_mux_axi_data_V_3_phi_fu_219_p4 = axi_data_V_3_reg_216;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp743_reg_436 == 1'd1))) begin
        ap_phi_mux_axi_data_V_5_ph_phi_fu_278_p4 = axi_data_V_3_reg_216;
    end else begin
        ap_phi_mux_axi_data_V_5_ph_phi_fu_278_p4 = axi_data_V_5_ph_reg_275;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_459 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_last_V_3_phi_fu_230_p4 = axi_last_V_14_reg_237;
    end else begin
        ap_phi_mux_axi_last_V_3_phi_fu_230_p4 = axi_last_V_3_reg_227;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp743_reg_436 == 1'd1))) begin
        ap_phi_mux_axi_last_V_5_ph_phi_fu_266_p4 = last_reg_194;
    end else begin
        ap_phi_mux_axi_last_V_5_ph_phi_fu_266_p4 = axi_last_V_5_ph_reg_263;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp743_reg_436 == 1'd1))) begin
        ap_phi_mux_last_1_ph_phi_fu_291_p4 = last_reg_194;
    end else begin
        ap_phi_mux_last_1_ph_phi_fu_291_p4 = last_1_ph_reg_287;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_459 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_last_phi_fu_198_p4 = axi_last_V_14_reg_237;
    end else begin
        ap_phi_mux_last_phi_fu_198_p4 = last_reg_194;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_459 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_start_3_phi_fu_209_p4 = 1'd0;
    end else begin
        ap_phi_mux_start_3_phi_fu_209_p4 = start_3_reg_206;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_459 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_in0_434_blk_n = img_in0_434_full_n;
    end else begin
        img_in0_434_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_459 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_in0_434_write = 1'b1;
    end else begin
        img_in0_434_write = 1'b0;
    end
end

always @ (*) begin
    if ((((last_1_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((or_ln138_fu_397_p2 == 1'd0) & (icmp_ln132_fu_392_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((start_reg_139 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_in1_TDATA_blk_n = stream_in1_TVALID_int_regslice;
    end else begin
        stream_in1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op58_read_state5 == 1'b1)) | (~((last_1_reg_324 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0)) & (last_1_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | (~((start_reg_139 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0)) & (start_reg_139 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_in1_TREADY_int_regslice = 1'b1;
    end else begin
        stream_in1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((start_reg_139 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0)) & (start_reg_139 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((start_reg_139 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0)) & (ap_phi_mux_start_phi_fu_143_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_377_p2 == 1'd1) & (cmp743_reg_436 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln132_fu_392_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln132_fu_392_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((last_1_reg_324 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0)) & (last_1_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((last_1_reg_324 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0)) & (ap_phi_mux_last_1_phi_fu_327_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (stream_in1_TVALID_int_regslice == 1'b0) & (ap_predicate_op58_read_state5 == 1'b1)) | ((icmp_ln132_reg_459 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_in0_434_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (stream_in1_TVALID_int_regslice == 1'b0) & (ap_predicate_op58_read_state5 == 1'b1)) | ((icmp_ln132_reg_459 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_in0_434_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter0 == 1'b1) & (stream_in1_TVALID_int_regslice == 1'b0) & (ap_predicate_op58_read_state5 == 1'b1)) | ((icmp_ln132_reg_459 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_in0_434_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((start_reg_139 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp1_stage0_iter0 = ((stream_in1_TVALID_int_regslice == 1'b0) & (ap_predicate_op58_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((icmp_ln132_reg_459 == 1'd0) & (img_in0_434_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((last_1_reg_324 == 1'd0) & (stream_in1_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_condition_161 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_last_1_phi_fu_327_p4 = last_1_reg_324;

assign ap_phi_mux_start_phi_fu_143_p4 = start_reg_139;

assign ap_phi_reg_pp1_iter0_axi_last_V_14_reg_237 = 'bx;

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_250 = 'bx;

always @ (*) begin
    ap_predicate_op58_read_state5 = ((or_ln138_fu_397_p2 == 1'd0) & (icmp_ln132_fu_392_p2 == 1'd0));
end

assign cmp743_fu_354_p2 = (($signed(p_read1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign i_3_fu_364_p2 = (i_reg_150 + 11'd1);

assign icmp_ln128_fu_377_p2 = (($signed(zext_ln128_fu_373_p1) < $signed(p_read)) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_392_p2 = ((zext_ln132_fu_388_p1 == p_read1) ? 1'b1 : 1'b0);

assign img_in0_434_din = p_Val2_s_reg_250;

assign j_3_fu_382_p2 = (j_reg_183 + 11'd1);

assign or_ln138_fu_397_p2 = (ap_phi_mux_start_3_phi_fu_209_p4 | ap_phi_mux_last_phi_fu_198_p4);

assign stream_in1_TREADY = regslice_both_AXI_video_strm_V_data_V_U_ack_in;

assign zext_ln128_fu_373_p1 = i_reg_150;

assign zext_ln132_fu_388_p1 = j_reg_183;

endmodule //absdiff_accel_AXIvideo2xfMat_24_9_1080_1920_1_s
