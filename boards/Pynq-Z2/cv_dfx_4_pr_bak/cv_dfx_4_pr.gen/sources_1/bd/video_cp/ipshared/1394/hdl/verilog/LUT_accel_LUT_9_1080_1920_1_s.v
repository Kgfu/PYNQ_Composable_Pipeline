// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LUT_accel_LUT_9_1080_1920_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_in_419_dout,
        img_in_419_empty_n,
        img_in_419_read,
        img_out_420_din,
        img_out_420_full_n,
        img_out_420_write,
        lut_address0,
        lut_ce0,
        lut_q0,
        p_src_rows_dout,
        p_src_rows_empty_n,
        p_src_rows_read,
        p_src_cols_dout,
        p_src_cols_empty_n,
        p_src_cols_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_state6 = 6'd4;
parameter    ap_ST_fsm_state7 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] img_in_419_dout;
input   img_in_419_empty_n;
output   img_in_419_read;
output  [23:0] img_out_420_din;
input   img_out_420_full_n;
output   img_out_420_write;
output  [9:0] lut_address0;
output   lut_ce0;
input  [7:0] lut_q0;
input  [31:0] p_src_rows_dout;
input   p_src_rows_empty_n;
output   p_src_rows_read;
input  [31:0] p_src_cols_dout;
input   p_src_cols_empty_n;
output   p_src_cols_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_in_419_read;
reg img_out_420_write;
reg lut_ce0;
reg p_src_rows_read;
reg p_src_cols_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_in_419_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln84_reg_482;
reg    img_out_420_blk_n;
reg    ap_enable_reg_pp1_iter4;
reg   [0:0] icmp_ln84_reg_482_pp1_iter3_reg;
reg    p_src_rows_blk_n;
reg    p_src_cols_blk_n;
reg   [9:0] indvar_flatten_reg_208;
reg   [1:0] i_V_reg_219;
reg   [8:0] j_V_reg_231;
reg   [15:0] j_V_1_reg_253;
reg   [31:0] p_src_rows_read_reg_392;
reg   [31:0] p_src_cols_read_reg_397;
wire   [9:0] add_ln878_fu_264_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln878_fu_270_p2;
reg   [0:0] icmp_ln878_reg_407;
reg   [0:0] icmp_ln878_reg_407_pp0_iter1_reg;
wire   [0:0] icmp_ln878_2_fu_276_p2;
reg   [0:0] icmp_ln878_2_reg_411;
wire   [8:0] select_ln54_fu_282_p3;
reg   [8:0] select_ln54_reg_416;
wire   [8:0] j_V_2_fu_290_p2;
wire   [1:0] select_ln878_fu_302_p3;
reg   [1:0] select_ln878_reg_426;
reg    ap_enable_reg_pp0_iter1;
reg   [1:0] select_ln878_reg_426_pp0_iter2_reg;
reg   [7:0] lut_0_addr_reg_436;
reg   [7:0] lut_0_addr_reg_436_pp0_iter2_reg;
reg   [7:0] lut_1_addr_reg_441;
reg   [7:0] lut_1_addr_reg_441_pp0_iter2_reg;
reg   [7:0] lut_2_addr_reg_446;
reg   [7:0] lut_2_addr_reg_446_pp0_iter2_reg;
reg   [7:0] lut_load_reg_451;
wire   [15:0] trunc_ln131_fu_316_p1;
reg   [15:0] trunc_ln131_reg_458;
wire    ap_CS_fsm_state6;
wire   [15:0] trunc_ln131_1_fu_319_p1;
reg   [15:0] trunc_ln131_1_reg_463;
wire   [12:0] i_V_2_fu_322_p2;
reg   [12:0] i_V_2_reg_468;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln878_1_fu_332_p2;
wire   [15:0] add_ln878_1_fu_337_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
reg    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
reg    ap_block_state12_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln84_fu_343_p2;
reg   [0:0] icmp_ln84_reg_482_pp1_iter1_reg;
reg   [0:0] icmp_ln84_reg_482_pp1_iter2_reg;
wire   [7:0] trunc_ln674_fu_348_p1;
reg   [7:0] trunc_ln674_reg_486;
reg   [7:0] p_Result_2_i_reg_491;
reg   [7:0] p_Result_4_i_reg_496;
wire   [7:0] lut_0_q0;
reg   [7:0] lut_0_load_reg_516;
reg    ap_enable_reg_pp1_iter3;
wire   [7:0] lut_1_q0;
reg   [7:0] lut_1_load_reg_521;
wire   [7:0] lut_2_q0;
reg   [7:0] lut_2_load_reg_526;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter2;
reg   [7:0] lut_0_address0;
reg    lut_0_ce0;
reg    lut_0_we0;
reg   [7:0] lut_1_address0;
reg    lut_1_ce0;
reg    lut_1_we0;
reg   [7:0] lut_2_address0;
reg    lut_2_ce0;
reg    lut_2_we0;
reg   [1:0] ap_phi_mux_i_V_phi_fu_223_p4;
wire    ap_block_pp0_stage0;
reg   [12:0] i_V_1_reg_242;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln534_fu_309_p1;
wire   [63:0] zext_ln534_1_fu_372_p1;
wire   [63:0] zext_ln534_2_fu_376_p1;
wire   [63:0] zext_ln534_3_fu_380_p1;
reg    ap_block_pp1_stage0_01001;
wire   [1:0] add_ln691_fu_296_p2;
wire   [15:0] zext_ln878_fu_328_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

LUT_accel_LUT_9_1080_1920_1_s_lut_0 #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_0_address0),
    .ce0(lut_0_ce0),
    .we0(lut_0_we0),
    .d0(lut_load_reg_451),
    .q0(lut_0_q0)
);

LUT_accel_LUT_9_1080_1920_1_s_lut_0 #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_1_address0),
    .ce0(lut_1_ce0),
    .we0(lut_1_we0),
    .d0(lut_load_reg_451),
    .q0(lut_1_q0)
);

LUT_accel_LUT_9_1080_1920_1_s_lut_0 #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_2_address0),
    .ce0(lut_2_ce0),
    .we0(lut_2_we0),
    .d0(lut_load_reg_451),
    .q0(lut_2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_1_fu_332_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state8))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_1_fu_332_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state8)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_1_fu_332_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_V_1_reg_242 <= i_V_2_reg_468;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_V_1_reg_242 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln878_reg_407_pp0_iter1_reg == 1'd0))) begin
        i_V_reg_219 <= select_ln878_reg_426;
    end else if ((~((p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_reg_219 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_fu_270_p2 == 1'd0))) begin
        indvar_flatten_reg_208 <= add_ln878_fu_264_p2;
    end else if ((~((p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_208 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln84_fu_343_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_V_1_reg_253 <= add_ln878_1_fu_337_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_1_fu_332_p2 == 1'd1))) begin
        j_V_1_reg_253 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_fu_270_p2 == 1'd0))) begin
        j_V_reg_231 <= j_V_2_fu_290_p2;
    end else if ((~((p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_V_reg_231 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_V_2_reg_468 <= i_V_2_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln84_reg_482 <= icmp_ln84_fu_343_p2;
        icmp_ln84_reg_482_pp1_iter1_reg <= icmp_ln84_reg_482;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln84_reg_482_pp1_iter2_reg <= icmp_ln84_reg_482_pp1_iter1_reg;
        icmp_ln84_reg_482_pp1_iter3_reg <= icmp_ln84_reg_482_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_fu_270_p2 == 1'd0))) begin
        icmp_ln878_2_reg_411 <= icmp_ln878_2_fu_276_p2;
        select_ln54_reg_416 <= select_ln54_fu_282_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln878_reg_407 <= icmp_ln878_fu_270_p2;
        icmp_ln878_reg_407_pp0_iter1_reg <= icmp_ln878_reg_407;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_407 == 1'd0))) begin
        lut_0_addr_reg_436 <= zext_ln534_fu_309_p1;
        lut_1_addr_reg_441 <= zext_ln534_fu_309_p1;
        lut_2_addr_reg_446 <= zext_ln534_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        lut_0_addr_reg_436_pp0_iter2_reg <= lut_0_addr_reg_436;
        lut_1_addr_reg_441_pp0_iter2_reg <= lut_1_addr_reg_441;
        lut_2_addr_reg_446_pp0_iter2_reg <= lut_2_addr_reg_446;
        select_ln878_reg_426_pp0_iter2_reg <= select_ln878_reg_426;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln84_reg_482_pp1_iter2_reg == 1'd0))) begin
        lut_0_load_reg_516 <= lut_0_q0;
        lut_1_load_reg_521 <= lut_1_q0;
        lut_2_load_reg_526 <= lut_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_407_pp0_iter1_reg == 1'd0))) begin
        lut_load_reg_451 <= lut_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_reg_482 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_Result_2_i_reg_491 <= {{img_in_419_dout[15:8]}};
        p_Result_4_i_reg_496 <= {{img_in_419_dout[23:16]}};
        trunc_ln674_reg_486 <= trunc_ln674_fu_348_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_src_cols_read_reg_397 <= p_src_cols_dout;
        p_src_rows_read_reg_392 <= p_src_rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln878_reg_407 == 1'd0))) begin
        select_ln878_reg_426 <= select_ln878_fu_302_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln131_1_reg_463 <= trunc_ln131_1_fu_319_p1;
        trunc_ln131_reg_458 <= trunc_ln131_fu_316_p1;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_270_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln84_fu_343_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_1_fu_332_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln878_reg_407_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_i_V_phi_fu_223_p4 = select_ln878_reg_426;
    end else begin
        ap_phi_mux_i_V_phi_fu_223_p4 = i_V_reg_219;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_1_fu_332_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln84_reg_482 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_in_419_blk_n = img_in_419_empty_n;
    end else begin
        img_in_419_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln84_reg_482 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_in_419_read = 1'b1;
    end else begin
        img_in_419_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln84_reg_482_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        img_out_420_blk_n = img_out_420_full_n;
    end else begin
        img_out_420_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln84_reg_482_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img_out_420_write = 1'b1;
    end else begin
        img_out_420_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        lut_0_address0 = zext_ln534_1_fu_372_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lut_0_address0 = lut_0_addr_reg_436_pp0_iter2_reg;
    end else begin
        lut_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        lut_0_ce0 = 1'b1;
    end else begin
        lut_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln878_reg_426_pp0_iter2_reg == 2'd0))) begin
        lut_0_we0 = 1'b1;
    end else begin
        lut_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        lut_1_address0 = zext_ln534_2_fu_376_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lut_1_address0 = lut_1_addr_reg_441_pp0_iter2_reg;
    end else begin
        lut_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        lut_1_ce0 = 1'b1;
    end else begin
        lut_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln878_reg_426_pp0_iter2_reg == 2'd1))) begin
        lut_1_we0 = 1'b1;
    end else begin
        lut_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        lut_2_address0 = zext_ln534_3_fu_380_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lut_2_address0 = lut_2_addr_reg_446_pp0_iter2_reg;
    end else begin
        lut_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        lut_2_ce0 = 1'b1;
    end else begin
        lut_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln878_reg_426_pp0_iter2_reg == 2'd0) & ~(select_ln878_reg_426_pp0_iter2_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lut_2_we0 = 1'b1;
    end else begin
        lut_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lut_ce0 = 1'b1;
    end else begin
        lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_blk_n = p_src_cols_empty_n;
    end else begin
        p_src_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_read = 1'b1;
    end else begin
        p_src_cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_blk_n = p_src_rows_empty_n;
    end else begin
        p_src_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_read = 1'b1;
    end else begin
        p_src_rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_fu_270_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_fu_270_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln878_1_fu_332_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln84_fu_343_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln84_fu_343_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln691_fu_296_p2 = (ap_phi_mux_i_V_phi_fu_223_p4 + 2'd1);

assign add_ln878_1_fu_337_p2 = (j_V_1_reg_253 + 16'd1);

assign add_ln878_fu_264_p2 = (indvar_flatten_reg_208 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln84_reg_482_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (img_out_420_full_n == 1'b0)) | ((icmp_ln84_reg_482 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_in_419_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln84_reg_482_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (img_out_420_full_n == 1'b0)) | ((icmp_ln84_reg_482 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_in_419_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln84_reg_482_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (img_out_420_full_n == 1'b0)) | ((icmp_ln84_reg_482 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_in_419_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp1_stage0_iter4 = ((icmp_ln84_reg_482_pp1_iter3_reg == 1'd0) & (img_out_420_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp1_stage0_iter1 = ((icmp_ln84_reg_482 == 1'd0) & (img_in_419_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign i_V_2_fu_322_p2 = (i_V_1_reg_242 + 13'd1);

assign icmp_ln84_fu_343_p2 = ((j_V_1_reg_253 == trunc_ln131_1_reg_463) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_332_p2 = ((zext_ln878_fu_328_p1 < trunc_ln131_reg_458) ? 1'b1 : 1'b0);

assign icmp_ln878_2_fu_276_p2 = ((j_V_reg_231 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_270_p2 = ((indvar_flatten_reg_208 == 10'd768) ? 1'b1 : 1'b0);

assign img_out_420_din = {{{lut_2_load_reg_526}, {lut_1_load_reg_521}}, {lut_0_load_reg_516}};

assign j_V_2_fu_290_p2 = (select_ln54_fu_282_p3 + 9'd1);

assign lut_address0 = zext_ln534_fu_309_p1;

assign select_ln54_fu_282_p3 = ((icmp_ln878_2_fu_276_p2[0:0] == 1'b1) ? 9'd0 : j_V_reg_231);

assign select_ln878_fu_302_p3 = ((icmp_ln878_2_reg_411[0:0] == 1'b1) ? add_ln691_fu_296_p2 : ap_phi_mux_i_V_phi_fu_223_p4);

assign trunc_ln131_1_fu_319_p1 = p_src_cols_read_reg_397[15:0];

assign trunc_ln131_fu_316_p1 = p_src_rows_read_reg_392[15:0];

assign trunc_ln674_fu_348_p1 = img_in_419_dout[7:0];

assign zext_ln534_1_fu_372_p1 = trunc_ln674_reg_486;

assign zext_ln534_2_fu_376_p1 = p_Result_2_i_reg_491;

assign zext_ln534_3_fu_380_p1 = p_Result_4_i_reg_496;

assign zext_ln534_fu_309_p1 = select_ln54_reg_416;

assign zext_ln878_fu_328_p1 = i_V_1_reg_242;

endmodule //LUT_accel_LUT_9_1080_1920_1_s
