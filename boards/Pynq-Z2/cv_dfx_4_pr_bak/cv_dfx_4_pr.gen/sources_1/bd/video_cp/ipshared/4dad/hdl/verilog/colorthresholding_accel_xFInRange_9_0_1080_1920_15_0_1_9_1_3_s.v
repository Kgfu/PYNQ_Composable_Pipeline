// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module colorthresholding_accel_xFInRange_9_0_1080_1920_15_0_1_9_1_3_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_in_418_dout,
        img_in_418_empty_n,
        img_in_418_read,
        img_out_419_din,
        img_out_419_full_n,
        img_out_419_write,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] img_in_418_dout;
input   img_in_418_empty_n;
output   img_in_418_read;
output  [7:0] img_out_419_din;
input   img_out_419_full_n;
output   img_out_419_write;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
input  [7:0] p_read5;
input  [7:0] p_read6;
input  [7:0] p_read7;
input  [7:0] p_read8;
input  [7:0] p_read9;
input  [7:0] p_read10;
input  [7:0] p_read11;
input  [7:0] p_read12;
input  [7:0] p_read13;
input  [7:0] p_read14;
input  [7:0] p_read15;
input  [7:0] p_read16;
input  [7:0] p_read17;
input  [15:0] p_read18;
input  [15:0] p_read19;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_in_418_read;
reg img_out_419_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_in_418_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln92_reg_690;
reg    img_out_419_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln92_reg_690_pp0_iter1_reg;
reg   [31:0] indvar_flatten_reg_229;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_574_p2;
reg   [31:0] bound_reg_680;
wire   [31:0] add_ln92_fu_248_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_state7_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln92_fu_254_p2;
wire   [0:0] icmp_ln56_fu_283_p2;
reg   [0:0] icmp_ln56_reg_694;
wire   [0:0] icmp_ln56_1_fu_288_p2;
reg   [0:0] icmp_ln56_1_reg_699;
wire   [0:0] icmp_ln890_fu_293_p2;
reg   [0:0] icmp_ln890_reg_704;
wire   [0:0] icmp_ln56_2_fu_298_p2;
reg   [0:0] icmp_ln56_2_reg_709;
wire   [0:0] icmp_ln890_1_fu_303_p2;
reg   [0:0] icmp_ln890_1_reg_714;
wire   [0:0] icmp_ln56_3_fu_308_p2;
reg   [0:0] icmp_ln56_3_reg_719;
wire   [0:0] icmp_ln56_4_fu_313_p2;
reg   [0:0] icmp_ln56_4_reg_724;
wire   [0:0] icmp_ln56_5_fu_318_p2;
reg   [0:0] icmp_ln56_5_reg_729;
wire   [0:0] icmp_ln890_2_fu_323_p2;
reg   [0:0] icmp_ln890_2_reg_734;
wire   [0:0] icmp_ln56_6_fu_328_p2;
reg   [0:0] icmp_ln56_6_reg_739;
wire   [0:0] icmp_ln890_3_fu_333_p2;
reg   [0:0] icmp_ln890_3_reg_744;
wire   [0:0] icmp_ln56_7_fu_338_p2;
reg   [0:0] icmp_ln56_7_reg_749;
wire   [0:0] icmp_ln56_8_fu_343_p2;
reg   [0:0] icmp_ln56_8_reg_754;
wire   [0:0] icmp_ln56_9_fu_348_p2;
reg   [0:0] icmp_ln56_9_reg_759;
wire   [0:0] icmp_ln890_4_fu_353_p2;
reg   [0:0] icmp_ln890_4_reg_764;
wire   [0:0] icmp_ln56_10_fu_358_p2;
reg   [0:0] icmp_ln56_10_reg_769;
wire   [0:0] icmp_ln890_5_fu_363_p2;
reg   [0:0] icmp_ln890_5_reg_774;
wire   [0:0] icmp_ln56_11_fu_368_p2;
reg   [0:0] icmp_ln56_11_reg_779;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] tmp_val1_V_fu_259_p1;
wire   [7:0] tmp_val1_V_1_fu_263_p4;
wire   [7:0] tmp_val1_V_2_fu_273_p4;
wire   [0:0] xor_ln56_2_fu_388_p2;
wire   [0:0] xor_ln56_fu_373_p2;
wire   [0:0] and_ln1348_fu_403_p2;
wire   [0:0] xor_ln890_fu_383_p2;
wire   [0:0] xor_ln56_3_fu_398_p2;
wire   [0:0] xor_ln890_1_fu_393_p2;
wire   [0:0] and_ln1348_4_fu_415_p2;
wire   [0:0] xor_ln56_1_fu_378_p2;
wire   [0:0] and_ln1348_6_fu_421_p2;
wire   [0:0] and_ln1348_2_fu_409_p2;
wire   [0:0] xor_ln56_6_fu_448_p2;
wire   [0:0] xor_ln56_4_fu_433_p2;
wire   [0:0] and_ln1348_7_fu_463_p2;
wire   [0:0] xor_ln890_2_fu_443_p2;
wire   [0:0] xor_ln56_7_fu_458_p2;
wire   [0:0] xor_ln890_3_fu_453_p2;
wire   [0:0] and_ln1348_9_fu_475_p2;
wire   [0:0] xor_ln56_5_fu_438_p2;
wire   [0:0] and_ln1348_10_fu_481_p2;
wire   [0:0] and_ln1348_8_fu_469_p2;
wire   [0:0] xor_ln56_10_fu_508_p2;
wire   [0:0] xor_ln56_8_fu_493_p2;
wire   [0:0] and_ln1348_11_fu_523_p2;
wire   [0:0] xor_ln890_4_fu_503_p2;
wire   [0:0] xor_ln56_11_fu_518_p2;
wire   [0:0] xor_ln890_5_fu_513_p2;
wire   [0:0] and_ln1348_13_fu_535_p2;
wire   [0:0] xor_ln56_9_fu_498_p2;
wire   [0:0] and_ln1348_14_fu_541_p2;
wire   [0:0] and_ln1348_12_fu_529_p2;
wire   [0:0] and_ln1348_1_fu_427_p2;
wire   [0:0] and_ln1348_5_fu_547_p2;
wire   [0:0] or_ln1349_fu_553_p2;
wire   [0:0] and_ln1348_3_fu_487_p2;
wire   [0:0] or_ln1349_1_fu_559_p2;
wire   [15:0] grp_fu_574_p0;
wire   [15:0] grp_fu_574_p1;
reg    grp_fu_574_ce;
wire    ap_CS_fsm_state8;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_574_p00;
wire   [31:0] grp_fu_574_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

colorthresholding_accel_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_574_p0),
    .din1(grp_fu_574_p1),
    .ce(grp_fu_574_ce),
    .dout(grp_fu_574_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln92_fu_254_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_229 <= add_ln92_fu_248_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_229 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_680 <= grp_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_690 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln56_10_reg_769 <= icmp_ln56_10_fu_358_p2;
        icmp_ln56_11_reg_779 <= icmp_ln56_11_fu_368_p2;
        icmp_ln56_1_reg_699 <= icmp_ln56_1_fu_288_p2;
        icmp_ln56_2_reg_709 <= icmp_ln56_2_fu_298_p2;
        icmp_ln56_3_reg_719 <= icmp_ln56_3_fu_308_p2;
        icmp_ln56_4_reg_724 <= icmp_ln56_4_fu_313_p2;
        icmp_ln56_5_reg_729 <= icmp_ln56_5_fu_318_p2;
        icmp_ln56_6_reg_739 <= icmp_ln56_6_fu_328_p2;
        icmp_ln56_7_reg_749 <= icmp_ln56_7_fu_338_p2;
        icmp_ln56_8_reg_754 <= icmp_ln56_8_fu_343_p2;
        icmp_ln56_9_reg_759 <= icmp_ln56_9_fu_348_p2;
        icmp_ln56_reg_694 <= icmp_ln56_fu_283_p2;
        icmp_ln890_1_reg_714 <= icmp_ln890_1_fu_303_p2;
        icmp_ln890_2_reg_734 <= icmp_ln890_2_fu_323_p2;
        icmp_ln890_3_reg_744 <= icmp_ln890_3_fu_333_p2;
        icmp_ln890_4_reg_764 <= icmp_ln890_4_fu_353_p2;
        icmp_ln890_5_reg_774 <= icmp_ln890_5_fu_363_p2;
        icmp_ln890_reg_704 <= icmp_ln890_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln92_reg_690 <= icmp_ln92_fu_254_p2;
        icmp_ln92_reg_690_pp0_iter1_reg <= icmp_ln92_reg_690;
    end
end

always @ (*) begin
    if ((icmp_ln92_fu_254_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & ((ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_574_ce = 1'b0;
    end else begin
        grp_fu_574_ce = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_690 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_in_418_blk_n = img_in_418_empty_n;
    end else begin
        img_in_418_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_690 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_in_418_read = 1'b1;
    end else begin
        img_in_418_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_690_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        img_out_419_blk_n = img_out_419_full_n;
    end else begin
        img_out_419_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_690_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_out_419_write = 1'b1;
    end else begin
        img_out_419_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln92_fu_254_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln92_fu_254_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln92_fu_248_p2 = (indvar_flatten_reg_229 + 32'd1);

assign and_ln1348_10_fu_481_p2 = (xor_ln56_5_fu_438_p2 & and_ln1348_9_fu_475_p2);

assign and_ln1348_11_fu_523_p2 = (xor_ln56_8_fu_493_p2 & xor_ln56_10_fu_508_p2);

assign and_ln1348_12_fu_529_p2 = (xor_ln890_4_fu_503_p2 & and_ln1348_11_fu_523_p2);

assign and_ln1348_13_fu_535_p2 = (xor_ln890_5_fu_513_p2 & xor_ln56_11_fu_518_p2);

assign and_ln1348_14_fu_541_p2 = (xor_ln56_9_fu_498_p2 & and_ln1348_13_fu_535_p2);

assign and_ln1348_1_fu_427_p2 = (and_ln1348_6_fu_421_p2 & and_ln1348_2_fu_409_p2);

assign and_ln1348_2_fu_409_p2 = (xor_ln890_fu_383_p2 & and_ln1348_fu_403_p2);

assign and_ln1348_3_fu_487_p2 = (and_ln1348_8_fu_469_p2 & and_ln1348_10_fu_481_p2);

assign and_ln1348_4_fu_415_p2 = (xor_ln890_1_fu_393_p2 & xor_ln56_3_fu_398_p2);

assign and_ln1348_5_fu_547_p2 = (and_ln1348_14_fu_541_p2 & and_ln1348_12_fu_529_p2);

assign and_ln1348_6_fu_421_p2 = (xor_ln56_1_fu_378_p2 & and_ln1348_4_fu_415_p2);

assign and_ln1348_7_fu_463_p2 = (xor_ln56_6_fu_448_p2 & xor_ln56_4_fu_433_p2);

assign and_ln1348_8_fu_469_p2 = (xor_ln890_2_fu_443_p2 & and_ln1348_7_fu_463_p2);

assign and_ln1348_9_fu_475_p2 = (xor_ln890_3_fu_453_p2 & xor_ln56_7_fu_458_p2);

assign and_ln1348_fu_403_p2 = (xor_ln56_fu_373_p2 & xor_ln56_2_fu_388_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln92_reg_690_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (img_out_419_full_n == 1'b0)) | ((icmp_ln92_reg_690 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (img_in_418_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln92_reg_690_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (img_out_419_full_n == 1'b0)) | ((icmp_ln92_reg_690 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (img_in_418_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln92_reg_690_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (img_out_419_full_n == 1'b0)) | ((icmp_ln92_reg_690 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (img_in_418_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((icmp_ln92_reg_690 == 1'd0) & (img_in_418_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter2 = ((icmp_ln92_reg_690_pp0_iter1_reg == 1'd0) & (img_out_419_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_574_p0 = grp_fu_574_p00;

assign grp_fu_574_p00 = p_read18;

assign grp_fu_574_p1 = grp_fu_574_p10;

assign grp_fu_574_p10 = p_read19;

assign icmp_ln56_10_fu_358_p2 = ((tmp_val1_V_1_fu_263_p4 < p_read7) ? 1'b1 : 1'b0);

assign icmp_ln56_11_fu_368_p2 = ((tmp_val1_V_2_fu_273_p4 < p_read8) ? 1'b1 : 1'b0);

assign icmp_ln56_1_fu_288_p2 = ((p_read9 < tmp_val1_V_fu_259_p1) ? 1'b1 : 1'b0);

assign icmp_ln56_2_fu_298_p2 = ((tmp_val1_V_1_fu_263_p4 < p_read1) ? 1'b1 : 1'b0);

assign icmp_ln56_3_fu_308_p2 = ((tmp_val1_V_2_fu_273_p4 < p_read2) ? 1'b1 : 1'b0);

assign icmp_ln56_4_fu_313_p2 = ((tmp_val1_V_fu_259_p1 < p_read3) ? 1'b1 : 1'b0);

assign icmp_ln56_5_fu_318_p2 = ((p_read12 < tmp_val1_V_fu_259_p1) ? 1'b1 : 1'b0);

assign icmp_ln56_6_fu_328_p2 = ((tmp_val1_V_1_fu_263_p4 < p_read4) ? 1'b1 : 1'b0);

assign icmp_ln56_7_fu_338_p2 = ((tmp_val1_V_2_fu_273_p4 < p_read5) ? 1'b1 : 1'b0);

assign icmp_ln56_8_fu_343_p2 = ((tmp_val1_V_fu_259_p1 < p_read6) ? 1'b1 : 1'b0);

assign icmp_ln56_9_fu_348_p2 = ((p_read15 < tmp_val1_V_fu_259_p1) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_283_p2 = ((tmp_val1_V_fu_259_p1 < p_read) ? 1'b1 : 1'b0);

assign icmp_ln890_1_fu_303_p2 = ((p_read11 < tmp_val1_V_2_fu_273_p4) ? 1'b1 : 1'b0);

assign icmp_ln890_2_fu_323_p2 = ((p_read13 < tmp_val1_V_1_fu_263_p4) ? 1'b1 : 1'b0);

assign icmp_ln890_3_fu_333_p2 = ((p_read14 < tmp_val1_V_2_fu_273_p4) ? 1'b1 : 1'b0);

assign icmp_ln890_4_fu_353_p2 = ((p_read16 < tmp_val1_V_1_fu_263_p4) ? 1'b1 : 1'b0);

assign icmp_ln890_5_fu_363_p2 = ((p_read17 < tmp_val1_V_2_fu_273_p4) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_293_p2 = ((p_read10 < tmp_val1_V_1_fu_263_p4) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_254_p2 = ((indvar_flatten_reg_229 == bound_reg_680) ? 1'b1 : 1'b0);

assign img_out_419_din = ((or_ln1349_1_fu_559_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign or_ln1349_1_fu_559_p2 = (or_ln1349_fu_553_p2 | and_ln1348_3_fu_487_p2);

assign or_ln1349_fu_553_p2 = (and_ln1348_5_fu_547_p2 | and_ln1348_1_fu_427_p2);

assign tmp_val1_V_1_fu_263_p4 = {{img_in_418_dout[15:8]}};

assign tmp_val1_V_2_fu_273_p4 = {{img_in_418_dout[23:16]}};

assign tmp_val1_V_fu_259_p1 = img_in_418_dout[7:0];

assign xor_ln56_10_fu_508_p2 = (icmp_ln56_10_reg_769 ^ 1'd1);

assign xor_ln56_11_fu_518_p2 = (icmp_ln56_11_reg_779 ^ 1'd1);

assign xor_ln56_1_fu_378_p2 = (icmp_ln56_1_reg_699 ^ 1'd1);

assign xor_ln56_2_fu_388_p2 = (icmp_ln56_2_reg_709 ^ 1'd1);

assign xor_ln56_3_fu_398_p2 = (icmp_ln56_3_reg_719 ^ 1'd1);

assign xor_ln56_4_fu_433_p2 = (icmp_ln56_4_reg_724 ^ 1'd1);

assign xor_ln56_5_fu_438_p2 = (icmp_ln56_5_reg_729 ^ 1'd1);

assign xor_ln56_6_fu_448_p2 = (icmp_ln56_6_reg_739 ^ 1'd1);

assign xor_ln56_7_fu_458_p2 = (icmp_ln56_7_reg_749 ^ 1'd1);

assign xor_ln56_8_fu_493_p2 = (icmp_ln56_8_reg_754 ^ 1'd1);

assign xor_ln56_9_fu_498_p2 = (icmp_ln56_9_reg_759 ^ 1'd1);

assign xor_ln56_fu_373_p2 = (icmp_ln56_reg_694 ^ 1'd1);

assign xor_ln890_1_fu_393_p2 = (icmp_ln890_1_reg_714 ^ 1'd1);

assign xor_ln890_2_fu_443_p2 = (icmp_ln890_2_reg_734 ^ 1'd1);

assign xor_ln890_3_fu_453_p2 = (icmp_ln890_3_reg_744 ^ 1'd1);

assign xor_ln890_4_fu_503_p2 = (icmp_ln890_4_reg_764 ^ 1'd1);

assign xor_ln890_5_fu_513_p2 = (icmp_ln890_5_reg_774 ^ 1'd1);

assign xor_ln890_fu_383_p2 = (icmp_ln890_reg_704 ^ 1'd1);

endmodule //colorthresholding_accel_xFInRange_9_0_1080_1920_15_0_1_9_1_3_s
