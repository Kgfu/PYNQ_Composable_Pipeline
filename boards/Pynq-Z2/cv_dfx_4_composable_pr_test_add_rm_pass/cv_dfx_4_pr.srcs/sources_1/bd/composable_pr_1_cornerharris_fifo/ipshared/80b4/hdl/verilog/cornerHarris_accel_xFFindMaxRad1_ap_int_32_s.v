// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cornerHarris_accel_xFFindMaxRad1_ap_int_32_s (
        ap_ready,
        t1,
        m0,
        m1,
        m2,
        b1,
        ap_return
);


output   ap_ready;
input  [31:0] t1;
input  [31:0] m0;
input  [31:0] m1;
input  [31:0] m2;
input  [31:0] b1;
output  [0:0] ap_return;

wire   [0:0] icmp_ln886_fu_42_p2;
wire   [0:0] icmp_ln886_1_fu_48_p2;
wire   [0:0] icmp_ln886_2_fu_54_p2;
wire   [0:0] icmp_ln886_3_fu_60_p2;
wire   [0:0] and_ln34_1_fu_72_p2;
wire   [0:0] and_ln34_fu_66_p2;

assign and_ln34_1_fu_72_p2 = (icmp_ln886_3_fu_60_p2 & icmp_ln886_2_fu_54_p2);

assign and_ln34_fu_66_p2 = (icmp_ln886_fu_42_p2 & icmp_ln886_1_fu_48_p2);

assign ap_ready = 1'b1;

assign ap_return = (and_ln34_fu_66_p2 & and_ln34_1_fu_72_p2);

assign icmp_ln886_1_fu_48_p2 = (($signed(m1) > $signed(m0)) ? 1'b1 : 1'b0);

assign icmp_ln886_2_fu_54_p2 = (($signed(m1) > $signed(m2)) ? 1'b1 : 1'b0);

assign icmp_ln886_3_fu_60_p2 = (($signed(m1) > $signed(b1)) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_42_p2 = (($signed(m1) > $signed(t1)) ? 1'b1 : 1'b0);

endmodule //cornerHarris_accel_xFFindMaxRad1_ap_int_32_s
