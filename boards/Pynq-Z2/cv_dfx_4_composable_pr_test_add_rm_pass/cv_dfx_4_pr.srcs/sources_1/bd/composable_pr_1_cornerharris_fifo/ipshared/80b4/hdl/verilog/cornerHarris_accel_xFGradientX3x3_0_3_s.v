// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cornerHarris_accel_xFGradientX3x3_0_3_s (
        ap_clk,
        ap_rst,
        t0,
        t2,
        m0,
        m2,
        b0,
        b2,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [7:0] t0;
input  [7:0] t2;
input  [7:0] m0;
input  [7:0] m2;
input  [7:0] b0;
input  [7:0] b2;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

wire   [8:0] ret_fu_86_p2;
reg   [8:0] ret_reg_133;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] ret_9_fu_100_p2;
reg   [8:0] ret_9_reg_138;
wire   [9:0] out_pix_7_fu_106_p2;
reg   [9:0] out_pix_7_reg_143;
wire    ap_block_pp0_stage0;
wire   [8:0] M00_fu_54_p3;
wire   [8:0] M01_fu_66_p3;
wire   [8:0] zext_ln215_4_fu_82_p1;
wire   [8:0] zext_ln215_fu_78_p1;
wire   [8:0] zext_ln215_6_fu_96_p1;
wire   [8:0] zext_ln215_5_fu_92_p1;
wire   [9:0] zext_ln60_fu_74_p1;
wire   [9:0] zext_ln59_fu_62_p1;
wire  signed [10:0] sext_ln66_fu_118_p1;
wire   [10:0] zext_ln61_fu_112_p1;
wire   [10:0] out_pix_8_fu_121_p2;
wire   [10:0] zext_ln62_fu_115_p1;
wire   [10:0] out_pix_fu_127_p2;
reg    ap_ce_reg;
reg   [10:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= out_pix_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_pix_7_reg_143[9 : 1] <= out_pix_7_fu_106_p2[9 : 1];
        ret_9_reg_138 <= ret_9_fu_100_p2;
        ret_reg_133 <= ret_fu_86_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = out_pix_fu_127_p2;
    end
end

assign M00_fu_54_p3 = {{m0}, {1'd0}};

assign M01_fu_66_p3 = {{m2}, {1'd0}};

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign out_pix_7_fu_106_p2 = (zext_ln60_fu_74_p1 - zext_ln59_fu_62_p1);

assign out_pix_8_fu_121_p2 = ($signed(sext_ln66_fu_118_p1) + $signed(zext_ln61_fu_112_p1));

assign out_pix_fu_127_p2 = (out_pix_8_fu_121_p2 - zext_ln62_fu_115_p1);

assign ret_9_fu_100_p2 = (zext_ln215_6_fu_96_p1 + zext_ln215_5_fu_92_p1);

assign ret_fu_86_p2 = (zext_ln215_4_fu_82_p1 + zext_ln215_fu_78_p1);

assign sext_ln66_fu_118_p1 = $signed(out_pix_7_reg_143);

assign zext_ln215_4_fu_82_p1 = b2;

assign zext_ln215_5_fu_92_p1 = t0;

assign zext_ln215_6_fu_96_p1 = b0;

assign zext_ln215_fu_78_p1 = t2;

assign zext_ln59_fu_62_p1 = M00_fu_54_p3;

assign zext_ln60_fu_74_p1 = M01_fu_66_p3;

assign zext_ln61_fu_112_p1 = ret_reg_133;

assign zext_ln62_fu_115_p1 = ret_9_reg_138;

always @ (posedge ap_clk) begin
    out_pix_7_reg_143[0] <= 1'b0;
end

endmodule //cornerHarris_accel_xFGradientX3x3_0_3_s
